rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // --- Users Collection ---
    // Users can:
    // - Create their own user document on signup.
    // - Read their own user document.
    // - Read public profiles of other users.
    // - Update their own specific profile fields.
    match /users/{userId} {
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow read: if isAuthenticated();
      allow update: if isAuthenticated() && request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'photoURL', 'bio', 'interests', 'bannerURL', 'onboardingComplete', 'likedEvents', 'savedEvents', 'following', 'hostApplicationStatus']);
      
      // --- Reviews Subcollection ---
      // Any authenticated user can create a review for a host.
      // Anyone can read reviews.
      match /reviews/{reviewId} {
        allow create: if isAuthenticated();
        allow read;
      }
    }

    // --- Events Collection ---
    // - Anyone can read events.
    // - Authenticated users can create events (if they are hosts, checked in actions).
    // - Only the event host can update their own event.
    match /events/{eventId} {
      allow read;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && request.resource.data.hostUid == request.auth.uid;
    }
    
    // --- Stories Collection ---
    // - Authenticated users can create their own stories.
    // - Anyone can read stories.
    match /stories/{storyId} {
        allow read;
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }
    
    // --- Bookings Collection ---
    // - Users can create their own booking requests.
    // - Users can read their own bookings.
    // - Hosts can update the status of bookings for their events.
    // - Hosts can read a list of bookings for their events.
    match /bookings/{bookingId} {
       allow read, create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
       allow update: if isAuthenticated() && get(/databases/$(database)/documents/events/$(request.resource.data.eventId)).data.hostUid == request.auth.uid;
       allow list: if isAuthenticated() && request.query.where.hostId == request.auth.uid;
    }

    // --- Chats Collection & Messages Subcollection ---
    // - A user can get a specific chat document if they are a participant.
    // - Users can create messages in a chat they are part of.
    // - Users can read messages in a chat they are part of.
    match /chats/{chatId} {
      allow get: if isAuthenticated() && request.auth.uid in resource.data.participantUids;
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participantUids;

      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids.hasAny([request.auth.uid]);
      }
    }
  }
}