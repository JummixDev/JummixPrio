rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // USERS
    // Users can be created by anyone (during signup).
    // Users can only read or update their own profile.
    match /users/{userId} {
      allow create;
      allow read, update: if isAuthenticated() && isOwner(userId);

      // Reviews are a subcollection of a host's user profile
      match /reviews/{reviewId} {
        allow create: if isAuthenticated(); // Allow any authenticated user to create a review
        allow read; // Allow anyone to read reviews
      }
    }

    // EVENTS
    // Events can be read by anyone.
    // Events can only be created, updated, or deleted by authenticated users
    // who are the designated host of the event.
    match /events/{eventId} {
      allow read;
      allow create: if isAuthenticated() && request.resource.data.hostUid == request.auth.uid;
      allow update: if isAuthenticated() && get(/databases/$(database)/documents/events/$(eventId)).data.hostUid == request.auth.uid;
    }

    // STORIES
    // Stories can be read by any authenticated user.
    // A user can only create stories for themselves.
    match /stories/{storyId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }

    // BOOKINGS
    // Users can create bookings for themselves.
    // Users can read/update their own bookings.
    // Hosts can read bookings associated with them.
    match /bookings/{bookingId} {
      allow create, read, update: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow list: if isAuthenticated() && request.query.where.hostId == request.auth.uid;
      allow get: if isAuthenticated() && (resource.data.userId == request.auth.uid || resource.data.hostId == request.auth.uid);
    }
    
    // CHATS
    // Only participants of a chat can read or write messages to it.
    match /chats/{chatId} {
      allow get: if isAuthenticated() && request.auth.uid in resource.data.participantUids;
      
      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids;
      }
    }
  }
}
