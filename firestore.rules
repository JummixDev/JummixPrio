rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for Admin role
    function isAdmin() {
      return request.auth.token.email == 'service@jummix.com';
    }
    
    // Helper function to check if user is a verified host
    function isVerifiedHost(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.isVerifiedHost == true;
    }

    // Users Collection
    match /users/{userId} {
      // Anyone authenticated can read user profiles
      allow read: if request.auth != null;
      
      // A user can create their own document
      allow create: if request.auth.uid == userId;
      
      // A user can update their own data, but some fields are protected
      allow update: if request.auth.uid == userId || isAdmin();
    }

    // Events Collection
    match /events/{eventId} {
      // Anyone can read events
      allow read: if request.auth != null;
      
      // Only verified hosts can create events
      allow create: if isVerifiedHost(request.resource.data.hostUid) && request.auth.uid == request.resource.data.hostUid;
      
      // Only the original host or an admin can update/delete an event
      allow update, delete: if (isVerifiedHost(resource.data.hostUid) && request.auth.uid == resource.data.hostUid) || isAdmin();
    }

    // Bookings Collection
    match /bookings/{bookingId} {
        // A user can create their own booking request
        allow create: if request.auth.uid == request.resource.data.userId;

        // The user who made the booking or the host of the event can read it. Admins can read too.
        allow read: if request.auth.uid == resource.data.userId || request.auth.uid == resource.data.hostId || isAdmin();

        // Only the host can update the status (approve/reject).
        allow update: if request.auth.uid == resource.data.hostId || isAdmin();
        
        // No one should be able to delete bookings directly for record keeping.
        allow delete: if false;
    }

    // Stories Collection
    match /stories/{storyId} {
      // Anyone can read stories
      allow read: if request.auth != null;
      
      // Only verified hosts can create stories
      allow create: if isVerifiedHost(request.resource.data.userId) && request.auth.uid == request.resource.data.userId;
      
      // Only the user who created it or an admin can delete it.
      allow delete: if (request.auth.uid == resource.data.userId) || isAdmin();
    }

    // Reviews (sub-collection of users)
    match /users/{hostId}/reviews/{reviewId} {
        // Anyone can read reviews
        allow read: if request.auth != null;
        
        // Any authenticated user can create a review, but not for themselves
        allow create: if request.auth != null && request.auth.uid != hostId;
    }

    // Chats Collection and Messages sub-collection
    match /chats/{chatId} {
      // Only chat participants can read/write to a chat document
      allow read, update: if request.auth.uid in resource.data.participantUids || isAdmin();
      allow create: if request.auth.uid in request.resource.data.participantUids;
      
      // Messages Subcollection
      match /messages/{messageId} {
        // Only participants of the parent chat can read or create messages
        allow read, create: if get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids.hasAny([request.auth.uid]) || isAdmin();
        
        // Users cannot update or delete messages
        allow update, delete: if false;
      }
    }
  }
}
