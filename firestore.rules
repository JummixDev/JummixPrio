
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users Collection
    match /users/{userId} {
      // Any authenticated user can read their own profile.
      // Anyone can create a user profile (during signup).
      // Only the owner can update their own profile.
      allow read, update: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated();

      // Public read access to other profiles
      allow get, list: if request.auth != null;

      // Reviews sub-collection
      match /reviews/{reviewId} {
          allow read;
          allow create: if isAuthenticated();
      }
    }

    // Events Collection
    match /events/{eventId} {
      // Anyone can read events.
      // Only authenticated users can create events.
      // Only the host who created the event can update it.
      allow read;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.hostUid == request.auth.uid;
    }

    // Stories Collection
    match /stories/{storyId} {
        allow read;
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }
    
    // Bookings Collection
    match /bookings/{bookingId} {
      // A booking ID is composite: `${userId}_${eventId}`
      allow read, create, update: if isAuthenticated() && (
        isOwner(bookingId.split('_')[0]) || // User can manage their own booking
        isOwner(resource.data.hostId)    // Host can manage requests for their event
      );
    }

    // Chats Collection
    match /chats/{chatId} {
      // Users can only read/write to chats they are a part of.
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantUids;

      // Messages Sub-collection
      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids;
      }
    }
  }
}
