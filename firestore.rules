rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isVerifiedHost() {
      return isSignedIn() && getUserData(request.auth.uid).isVerifiedHost == true;
    }
    
    function isAdmin() {
        return isSignedIn() && request.auth.token.email == 'service@jummix.com';
    }
    
    // --- Collection Rules ---

    // Users: Publicly readable, but only the owner can write.
    match /users/{userId} {
      allow read: if true;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.keys().hasAll(['displayName', 'bio']);
      allow delete: if isSignedIn() && isOwner(userId);
    }
    
    // Events: Publicly readable. Only verified hosts or admins can create. Only owner can update/delete.
    match /events/{eventId} {
      allow read: if true;
      allow create: if (isVerifiedHost() || isAdmin()) && request.resource.data.hostUid == request.auth.uid;
      allow update, delete: if isSignedIn() && request.resource.data.hostUid == request.auth.uid;
    }

    // Bookings: Only involved parties can read/write.
    match /bookings/{bookingId} {
      allow read: if isSignedIn() && (isOwner(request.resource.data.userId) || isOwner(request.resource.data.hostId));
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isSignedIn() && isOwner(request.resource.data.hostId); // Only host can approve/reject
      allow delete: if false; // Disallow deleting bookings
    }
    
    // Chats: Only participants can access.
    match /chats/{chatId} {
      allow get: if isSignedIn() && request.auth.uid in resource.data.participantUids;
      allow list: if isSignedIn() && request.auth.uid in resource.data.participantUids;
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participantUids;
      allow update: if isSignedIn() && request.auth.uid in resource.data.participantUids;

      // Messages: Subcollection of a chat
      match /messages/{messageId} {
        allow read, write: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids;
      }
    }
    
    // Stories: Publicly readable, only owner can create/delete.
    match /stories/{storyId} {
      allow read: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }

    // Reviews: Publicly readable, only signed-in users can write.
    match /users/{hostId}/reviews/{reviewId} {
      allow read: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.reviewerId);
    }
  }
}
