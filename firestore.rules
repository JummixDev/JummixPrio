rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isVerifiedHost() {
    	return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isVerifiedHost == true;
    }

    function isAdmin() {
      return request.auth.token.email == 'service@jummix.com';
    }

    // USER PROFILES
    match /users/{userId} {
      allow read: if true;
      allow create: if isSignedIn() && isOwner(userId);
      // Allow update only if the user is the owner.
      // Disallow changing protected fields like email or host status.
      allow update: if isSignedIn() && isOwner(userId)
                    && request.resource.data.isVerifiedHost == resource.data.isVerifiedHost
                    && request.resource.data.hostApplicationStatus == resource.data.hostApplicationStatus;
      allow delete: if isSignedIn() && isOwner(userId);
      
      // Reviews sub-collection
      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isSignedIn() && request.resource.data.reviewerId == request.auth.uid;
      }
    }

    // EVENTS
    match /events/{eventId} {
      allow read: if true;
      allow create: if isSignedIn() && (isVerifiedHost() || isAdmin()) && request.resource.data.hostUid == request.auth.uid;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/events/$(eventId)).data.hostUid == request.auth.uid;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/events/$(eventId)).data.hostUid == request.auth.uid;
    }
    
    // BOOKINGS
    match /bookings/{bookingId} {
    	allow read: if isSignedIn() && (request.auth.uid == resource.data.userId || request.auth.uid == resource.data.hostId);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/bookings/$(bookingId)).data.hostId == request.auth.uid;
      allow delete: if isSignedIn() && (request.auth.uid == resource.data.userId || request.auth.uid == resource.data.hostId);
    }
    
    // CHATS & MESSAGES
    match /chats/{chatId} {
    	allow read, write: if isSignedIn() && request.auth.uid in resource.data.participantUids;
    	
      match /messages/{messageId} {
      	allow read, create: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids.hasAny([request.auth.uid]);
        allow update, delete: if false; // Messages are immutable
      }
    }
    
    // STORIES
    match /stories/{storyId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }
  }
}