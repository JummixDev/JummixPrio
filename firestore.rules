rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isVerifiedHost() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isVerifiedHost == true;
    }
    
    function isEventParticipant(chatId) {
      return request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids;
    }

    // Collections
    match /users/{userId} {
      allow read;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId)
                    // Fields that can't be changed by the user
                    && !( 'isVerifiedHost' in request.resource.data && request.resource.data.isVerifiedHost != resource.data.isVerifiedHost )
                    && !( 'hostApplicationStatus' in request.resource.data && request.resource.data.hostApplicationStatus != resource.data.hostApplicationStatus )
                    && !( 'email' in request.resource.data && request.resource.data.email != resource.data.email );
      allow delete: if isSignedIn() && isOwner(userId);
    }

    match /events/{eventId} {
      allow read;
      allow create: if isSignedIn() && isVerifiedHost() && request.resource.data.hostUid == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.hostUid);
      allow delete: if isSignedIn() && isOwner(resource.data.hostUid);
    }

    match /bookings/{bookingId} {
        allow read: if isSignedIn() && (isOwner(resource.data.userId) || isOwner(resource.data.hostId));
        allow create: if isSignedIn() && isOwner(request.resource.data.userId);
        allow update: if isSignedIn() && isOwner(resource.data.hostId); // Only host can approve/reject
        allow delete: if isSignedIn() && (isOwner(resource.data.userId) || isOwner(resource.data.hostId));
    }
    
    match /chats/{chatId} {
      allow read, update: if isSignedIn() && isEventParticipant(chatId);
      
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && isEventParticipant(chatId);
      }
    }

    match /stories/{storyId} {
        allow read;
        allow create: if isSignedIn() && isOwner(request.resource.data.userId);
        allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }

    match /users/{userId}/reviews/{reviewId} {
        allow read;
        allow create: if isSignedIn() && isOwner(request.resource.data.reviewerId);
    }

  }
}
