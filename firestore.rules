
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if the user is a participant in a chat
    function isChatParticipant(chatId) {
      return get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids[request.auth.uid] == true || request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids;
    }

    // Users: Can read all, can only write to their own document
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId);
      // Allow updates only by the owner.
      allow update: if isOwner(userId);
      // Deletes are disallowed for now to prevent data loss.
      allow delete: if false;

      // Reviews subcollection: Can be created by any signed-in user, but not updated/deleted by them.
      match /reviews/{reviewId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        allow update, delete: if isOwner(userId); // Only the profile owner (host) can delete reviews.
      }
    }

    // Events: Can read all, hosts can create/update their own
    match /events/{eventId} {
      allow read: if isSignedIn();
      // Users can create events if they are the host specified in the event data
      allow create: if isSignedIn() && request.resource.data.hostUid == request.auth.uid;
      // Users can update events if they were the original host
      allow update: if isSignedIn() && resource.data.hostUid == request.auth.uid;
      // Deletes are disallowed for now.
      allow delete: if false;
    }
    
    // Stories: Authenticated users can read all. Users can only create/delete their own.
    match /stories/{storyId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Bookings: Users can read/write their own booking documents.
    // The document ID is structured as `${userId}_${eventId}`.
    match /bookings/{bookingId} {
        allow read, write: if isSignedIn() && request.auth.uid == bookingId.split('_')[0];
        // Hosts can also update the status of a booking for their event
        allow update: if isSignedIn() && get(/databases/$(database)/documents/events/$(resource.data.eventId)).data.hostUid == request.auth.uid;
    }

    // Chats & Messages
    match /chats/{chatId} {
      // A user can read a chat document if their UID is in the participantUids array.
      allow read: if isSignedIn() && request.auth.uid in resource.data.participantUids;
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participantUids;

      // Messages Subcollection
      match /messages/{messageId} {
        // A user can read messages in a chat if they are a participant of that chat.
        allow read: if isSignedIn() && isChatParticipant(chatId);
        // A user can create a message if they are a participant and the sender.
        allow create: if isSignedIn() && isChatParticipant(chatId) && request.resource.data.senderUid == request.auth.uid;
      }
    }
  }
}
