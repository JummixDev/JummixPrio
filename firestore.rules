rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getRole(userId) {
        return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isVerifiedHost(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.isVerifiedHost == true;
    }

    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.email == 'service@jummix.com';
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId)
                    // Allow admin to update any user
                    || (isSignedIn() && isAdmin(request.auth.uid));
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin(request.auth.uid));
    }

    match /events/{eventId} {
      allow read: if true;
      allow create: if isSignedIn() && isVerifiedHost(request.auth.uid);
      allow update, delete: if isSignedIn() && isVerifiedHost(request.auth.uid) && request.auth.uid == resource.data.hostUid;
    }

    match /chats/{chatId} {
      allow read, create: if isSignedIn() && request.auth.uid in resource.data.participantUids;
      
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids;
      }
    }
    
    match /bookings/{bookingId} {
      allow read: if isSignedIn() && (request.auth.uid == resource.data.userId || request.auth.uid == resource.data.hostId || isAdmin(request.auth.uid));
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn() && request.auth.uid == resource.data.hostId; // Only host can approve/reject
    }

    match /users/{userId}/reviews/{reviewId} {
        allow read: if true;
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.reviewerId;
    }
    
    match /stories/{storyId} {
        allow read: if true;
        allow create: if isSignedIn() && isVerifiedHost(request.auth.uid) && request.auth.uid == request.resource.data.userId;
    }
  }
}
