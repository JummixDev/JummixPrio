
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      // Anyone can read public user profiles.
      // The owner of a document can update it, and create it.
      allow read: if true;
      allow update, create: if isAuthenticated() && isOwner(userId);

      // Subcollection for reviews on a host
      match /reviews/{reviewId} {
        // Anyone authenticated can write a review about a host.
        // Only the review author can update/delete their own review.
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && isOwner(resource.data.reviewerId);
      }
    }
    
    match /events/{eventId} {
        // Events are public to everyone.
        // Only authenticated users can create events (via a server-side action that sets hostUid).
        // Only the host who owns the event can update it.
        allow read: if true;
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && request.auth.uid == resource.data.hostUid;
    }

    match /chats/{chatId} {
        // A user can read a chat document if their UID is in the participantUids array.
        // List queries are insecure here, so we only allow direct gets.
        allow get: if isAuthenticated() && request.auth.uid in resource.data.participantUids;

        match /messages/{messageId} {
            // A user can read/write messages in a chat if they are a participant.
            allow read, create: if isAuthenticated() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids.hasAny([request.auth.uid]);
        }
    }
    
    match /stories/{storyId} {
        // Anyone authenticated can see stories.
        // Only the user who created the story can create, update or delete it.
        allow read: if isAuthenticated();
        allow create, update, delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    match /bookings/{bookingId} {
        // The user who made the booking or the host of the event can read the booking.
        allow read: if isAuthenticated() && (isOwner(resource.data.userId) || request.auth.uid == resource.data.hostId);
        // A user can create a booking for themselves.
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
        // The host can update the booking status (approve/reject).
        allow update: if isAuthenticated() && request.auth.uid == resource.data.hostId;
    }
  }
}
