// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Provides personalized event recommendations based on user interests and social connections.
 *
 * - personalizedEventRecommendations - A function that returns personalized event recommendations.
 * - PersonalizedEventRecommendationsInput - The input type for the personalizedEventRecommendations function.
 * - PersonalizedEventRecommendationsOutput - The return type for the personalizedEventRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PersonalizedEventRecommendationsInputSchema = z.object({
  userInterests: z
    .array(z.string())
    .describe('A list of the user\u2019s interests, such as music genres, sports, or hobbies.'),
  socialConnections: z
    .array(z.string())
    .describe(
      'A list of the user\u2019s social connections, such as friends, family, or colleagues. Should be usernames or IDs.'
    ),
  pastEvents: z
    .array(z.string())
    .describe(
      'A list of events the user has attended in the past. Should be event names or IDs.'
    ),
  location: z
    .string()
    .optional()
    .describe('The user\u2019s current location to prioritize nearby events.'),
});
export type PersonalizedEventRecommendationsInput = z.infer<typeof PersonalizedEventRecommendationsInputSchema>;

const PersonalizedEventRecommendationsOutputSchema = z.object({
  eventRecommendations: z
    .array(z.string())
    .describe('A list of personalized event recommendations based on the user\u2019s interests and social connections.'),
});
export type PersonalizedEventRecommendationsOutput = z.infer<typeof PersonalizedEventRecommendationsOutputSchema>;

export async function personalizedEventRecommendations(
  input: PersonalizedEventRecommendationsInput
): Promise<PersonalizedEventRecommendationsOutput> {
  return personalizedEventRecommendationsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'personalizedEventRecommendationsPrompt',
  input: {schema: PersonalizedEventRecommendationsInputSchema},
  output: {schema: PersonalizedEventRecommendationsOutputSchema},
  prompt: `You are an AI assistant that recommends events to users based on their interests and social connections.

  Consider the following information about the user:
  - Interests: {{userInterests}}
  - Social Connections: {{socialConnections}}
  - Past Events: {{pastEvents}}
  - Location: {{location}}

  Recommend events that the user is likely to enjoy based on their interests and social connections.
  The events should be relevant to the user's interests and location.
  Provide a list of event recommendations.
  `,config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_HATE_SPEECH',
        threshold: 'BLOCK_ONLY_HIGH',
      },
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_NONE',
      },
      {
        category: 'HARM_CATEGORY_HARASSMENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
        threshold: 'BLOCK_LOW_AND_ABOVE',
      },
    ],
  },
});

const personalizedEventRecommendationsFlow = ai.defineFlow(
  {
    name: 'personalizedEventRecommendationsFlow',
    inputSchema: PersonalizedEventRecommendationsInputSchema,
    outputSchema: PersonalizedEventRecommendationsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
