// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Provides AI-powered event search functionality.
 *
 * - searchEventsWithAI - A function that returns event IDs based on a natural language query.
 * - EventSearchInput - The input type for the searchEventsWithAI function.
 * - EventSearchOutput - The return type for the searchEventsWithAI function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const EventSchema = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  location: z.string(),
  // Add other relevant event fields to improve search quality
});

const EventSearchInputSchema = z.object({
  query: z
    .string()
    .describe('The user\'s natural language search query for an event.'),
  events: z
    .array(EventSchema)
    .describe('The list of all available events to search through.'),
});
export type EventSearchInput = z.infer<typeof EventSearchInputSchema>;

const EventSearchOutputSchema = z.object({
  matchingEventIds: z
    .array(z.string())
    .describe('A list of event IDs that best match the user\'s query.'),
});
export type EventSearchOutput = z.infer<typeof EventSearchOutputSchema>;

export async function searchEventsWithAI(
  input: EventSearchInput
): Promise<EventSearchOutput> {
  return eventSearchFlow(input);
}

const prompt = ai.definePrompt({
  name: 'eventSearchPrompt',
  input: {schema: EventSearchInputSchema},
  output: {schema: EventSearchOutputSchema},
  prompt: `You are an intelligent event search assistant. Your task is to find the most relevant events from a provided list based on a user's natural language query.

Analyze the user's query: "{{query}}"

Here is the list of available events:
{{#each events}}
- Event ID: {{this.id}}
  Name: {{this.name}}
  Description: {{this.description}}
  Location: {{this.location}}
---
{{/each}}

Based on the user's query, identify the IDs of the events that are the best match. Consider the event's name, description, and location. Also interpret intents like "this weekend", "something chill", "near downtown", etc.

Return only the IDs of the matching events. If no events match, return an empty array.
  `,
});

const eventSearchFlow = ai.defineFlow(
  {
    name: 'eventSearchFlow',
    inputSchema: EventSearchInputSchema,
    outputSchema: EventSearchOutputSchema,
  },
  async input => {
    if (input.events.length === 0) {
      return { matchingEventIds: [] };
    }
    const {output} = await prompt(input);
    return output!;
  }
);
